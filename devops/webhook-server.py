#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Git –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ Git —Å–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
"""

import tempfile
import subprocess
import os
import json
import hashlib
import hmac
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PORT = 8080

class WebhookHandler(BaseHTTPRequestHandler):

    def do_POST(self):
        content_length = int(self.headers.get('Content-Length', 0))
        body = self.rfile.read(content_length)

        try:
            payload = json.loads(body.decode('utf-8'))
            success = self._process_webhook(payload)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â–µ –∂–∏–≤–æ
            try:
                if success:
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(b'{"status": "success"}')
                    print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç 200 - –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω")
                else:
                    self.send_response(500)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(b'{"status": "deployment_failed"}')
                    print("‚ùå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç 500 - –¥–µ–ø–ª–æ–π –ø—Ä–æ–≤–∞–ª–µ–Ω")
            except BrokenPipeError:
                print("‚ö†Ô∏è  GitHub –æ—Ç–∫–ª—é—á–∏–ª—Å—è, –Ω–æ –¥–µ–ø–ª–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω")
                    
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
            try:
                self.send_response(400)
                self.end_headers()
            except:
                pass
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            try:
                self.send_response(500)
                self.end_headers()
            except:
                pass

    def do_GET(self):
        """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()

        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>DevOps Webhook Demo</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; }}
                .container {{ background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                h1 {{ color: #4d90cd; text-align: center; }}
                .info {{ background-color: #e7f3ff; padding: 15px; border-radius: 5px; margin: 20px 0; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üöÄ DevOps Webhook Demo Server</h1>
                <div class="info">
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç webhook —Å–æ–±—ã—Ç–∏—è –æ—Ç GitHub</p>
                    <p><strong>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</strong> {time}</p>
                    <p><strong>–ü–æ—Ä—Ç:</strong> {port}</p>
                </div>
                <p>–≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ Git —Å–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã.</p>
                <p>–ö–∞–∂–¥—ã–π push, pull request –∏–ª–∏ release –±—É–¥–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.</p>
            </div>
        </body>
        </html>
        """.format(time=datetime.now().strftime("%Y-%m-%d %H:%M:%S"), port=PORT)

        self.wfile.write(html.encode('utf-8'))

    def _process_webhook(self, payload):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–±—ã—Ç–∏—è"""

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        event_type = self.headers.get('X-GitHub-Event', 'unknown')
        repo_name = payload.get('repository', {}).get('full_name', 'unknown')
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        print(f"\nüîî –ü–æ–ª—É—á–µ–Ω–æ webhook —Å–æ–±—ã—Ç–∏–µ:")
        print(f"   –í—Ä–µ–º—è: {timestamp}")
        print(f"   –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
        print(f"   –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_name}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
        if event_type == 'push':
            res =  self._handle_push_event(payload)
            return res
        elif event_type == 'pull_request':
            self._handle_pr_event(payload)
        elif event_type == 'release':
            self._handle_release_event(payload)

        elif enent_type == 'create':
            print(f"–°–æ–∑–¥–∞–Ω {payload.get('ref_type')}: {payload.get('ref')}")
            return True
        else:
            print(f"   ‚ÑπÔ∏è  –°–æ–±—ã—Ç–∏–µ '{event_type}' - –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")

    
    def _handle_push_event(self, payload):
        commits = payload.get('commits', [])
        branch = payload.get('ref', '').replace('refs/heads/', '')
        pusher = payload.get('pusher', {}).get('name', 'unknown')
        clone_url = payload.get('repository', {}).get('clone_url', 'unknown')

        print(f"   üìù Push –≤ –≤–µ—Ç–∫—É: {branch}")
        print(f"   üë§ –ê–≤—Ç–æ—Ä: {pusher}")
        print(f"   üìä –ö–æ–º–º–∏—Ç–æ–≤: {len(commits)}")

        print(f"   üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Æ:")
        print(f"      - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤–µ—Ç–∫–∏ {branch}")
        print(f"      - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")

        with tempfile.TemporaryDirectory() as tmpdir:
            print(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {tmpdir}")

            try:
                subprocess.run(
                    ["git", "clone", clone_url, tmpdir],
                    check=True
                )

                subprocess.run(
                    ["git", "checkout", branch],
                    cwd=tmpdir,
                    check=True
                )

                # –ü–†–û–ü–£–°–¢–ò–¢–¨ SUBMODULES - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                print(f"      - –ü—Ä–æ–ø—É—Å–∫–∞–µ–º submodules (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã)...")

                print(f"      - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
                result = subprocess.run(
                    ["./devops/test.sh"],
                    cwd=tmpdir,
                    check=True,
                    capture_output=True,
                    text=True
                )
                print(f"      ‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
                print(f"         {result.stdout.strip()}")

                print(f"      - –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è...")
                subprocess.run(
                    ["./devops/deploy.sh"],
                    cwd=tmpdir,
                    check=True
                )
                print(f"      ‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                return True

            except subprocess.CalledProcessError as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è!")
                print(f"         {e.stdout if e.stdout else '–ù–µ—Ç –≤—ã–≤–æ–¥–∞'}")
                if e.stderr:
                    print(f"         –û—à–∏–±–∫–∞: {e.stderr}")
                return False
            except Exception as e:
                print(f"      ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                return False

    def _handle_pr_event(self, payload):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Pull Request —Å–æ–±—ã—Ç–∏—è"""
        action = payload.get('action', '')
        pr_number = payload.get('pull_request', {}).get('number', '')
        title = payload.get('pull_request', {}).get('title', '')

        print(f"   üîÄ Pull Request #{pr_number}: {action}")
        print(f"   üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")

    def _handle_release_event(self, payload):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Release —Å–æ–±—ã—Ç–∏—è"""
        action = payload.get('action', '')
        tag_name = payload.get('release', {}).get('tag_name', '')

        print(f"   üè∑Ô∏è  Release {tag_name}: {action}")

def main():
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""

    print(f"üöÄ –ó–∞–ø—É—Å–∫ DevOps Webhook Demo Server")
    print(f"üì° –ü–æ—Ä—Ç: {PORT}")
    print(f"üåê URL: http://0.0.0.0:{PORT}")
    print(f"üîß Webhook URL: http://0.0.0.0:{PORT}/webhook")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"\nüëÄ –û–∂–∏–¥–∞–Ω–∏–µ webhook —Å–æ–±—ã—Ç–∏–π –æ—Ç GitHub...")
    print(f"üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C\n")

    try:
        server = HTTPServer(('0.0.0.0', PORT), WebhookHandler)
        server.serve_forever()
    except KeyboardInterrupt:
        print(f"\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()
